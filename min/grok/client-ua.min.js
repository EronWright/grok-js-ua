(function(global){var GROK=global.GROK;GROK.Client=function(apiKey,options){this._validated=false;if(!GROK.util.isSet(apiKey)){throw new Error("Cannot create GROK Client without an API "+'Key:\nnew GROK.Client("my-api-key");')}options=options||{};options.apiKey=apiKey;GROK.ApiObject.call(this,{},options);if(options.user&&options.user.id){this.setScalars(options.user);this._validated=true}this.constructor=GROK.Client};GROK.Client.prototype=GROK.util.heir(GROK.ApiObject.prototype);GROK.Client.prototype.constructor=GROK.ApiObject;GROK.Client.NAMESPACE="users";GROK.Client.prototype.init=function(callback){GROK.info("Connecting to Grok...");var me=this;this.makeRequest({method:"GET",path:"users",success:function(resp){if(!resp||!resp.users){callback(new Error("Client cannot understand "+"response from API at "+me.getEndpoint()+". Are you sure this is the proper Grok API URL?"))}else{GROK.info("Connected to Grok.");me.setScalars(resp.users[0]);me._validated=true;callback(null)}},failure:function(error){if(error.message==="Unauthorized"){callback(new Error('Invalid API key: "'+me.getApiKey()+'"'))}else{callback(error)}}})};GROK.Client.prototype.isValidated=function(){return this._validated};GROK.Client.prototype.createProject=function(name,callback){callback=callback||function(){};this.createObject(GROK.Project,{name:name},callback)};GROK.Client.prototype.createModel=function(model,callback){callback=callback||function(){};this.createObject(GROK.Model,model,callback)};GROK.Client.prototype.createStream=function(streamDefinition,callback){callback=callback||function(){};this.createObject(GROK.Stream,streamDefinition,callback)};GROK.Client.prototype.getStream=function(id,callback){callback=callback||function(){};this.getObject(GROK.Stream,id,function(err,stream){if(err&&err.message==="Not Found"){err.message="Input stream '"+id+"' not found";callback(err)}else if(err){callback(err)}else{callback(null,stream)}})};GROK.Client.prototype.getProject=function(id,callback){this.getObject(GROK.Project,id,callback)};GROK.Client.prototype.getModel=function(id,callback){var me=this;this.getObject(GROK.Model,id,function(err,model){if(err){return callback(err)}model.setScalar("_parent",me);callback(null,model)})};GROK.Client.prototype.listProjects=function(callback){this.listObjects(GROK.Project,callback)};GROK.Client.prototype.listModels=function(callback){this.listObjects(GROK.Model,{all:true},callback)};GROK.Client.prototype.listStreams=function(callback){this.listObjects(GROK.Stream,callback)}})(window);